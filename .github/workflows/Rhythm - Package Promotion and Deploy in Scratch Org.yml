# Unique name for this workflow
name: Rhythm - Package Promotion and Deploy in Scratch Org

# Definition when the workflow should run

on:
  workflow_dispatch:
    inputs:
     scratch-org_name: 
      #friendly name to the scratch-org which needs to be created
      default: 'scratch-org'
      required: true
# Jobs to be executed

jobs:

 environment-setup:
  
    name: environment-setup
    runs-on: ubuntu-latest
    
    steps:
    
      # Checkout the source code
      - name: 'Checkout source code'
        uses: actions/checkout@v2
        
      # Cache node_modules to speed up the process
      - name: Setup Node Environment
        uses: actions/setup-node@v2-beta
        with:
          node-version: '12'
          
 validate:
    name: Org Authenticate and Validate
    needs: [environment-setup]
    runs-on: ubuntu-latest
    # if: github.event == 'push'
    steps:
    
    # Install Salesforce CLI
      - name: 'Install Salesforce CLI'
        run: |
            wget https://developer.salesforce.com/media/salesforce-cli/sfdx-linux-amd64.tar.xz
            mkdir sfdx-cli
            tar xJf sfdx-linux-amd64.tar.xz -C sfdx-cli --strip-components 1
            ./sfdx-cli/install
            
    # Run Salesforce CLI Scanner For Security checks
      - name: 'Check for SFDX Update'
        run: sfdx update
        
    # Install Salesforce CLI Scanner
      - name: 'Install Salesforce CLI Scanner'
        run: sfdx plugins:install @salesforce/sfdx-scanner

    # Checkout the source code
      - name: 'Checkout source code'
        uses: actions/checkout@v2

    # Export the Package name
      - uses: actions/checkout@v2
      - name: Set env
        run: echo "PACKAGENAME=${{ secrets.MANAGED_PACKAGE1 }}" >> $GITHUB_ENV
      - name: Packagename
        run: echo $PACKAGENAME

        
    # Connect with Salesforce ORG
      - name: 'Connect with Salesforce ORG'
        working-directory: .github/jwt/
        run: sfdx auth:jwt:grant --clientid ${{ secrets.CONNECTED_APP_CONSUMER_KEY_DEVHUB }} --jwtkeyfile server.key --username ${{ secrets.HUB_ORG_USERNAME }} -d --instanceurl ${{ secrets.SFDC_HOST_LOGIN }}
        
     # Run Salesforce CLI Scanner For Security checks _
      - name: 'List All ORGS'
        run: sfdx force:org:list
           
     # Add namespace to project config
      - name: 'Add namespace to project config'
        run: |
            sed -i 's,"namespace": "","namespace": "autocomp",' sfdx-project.json
            
     # Add namespace to CPEs
      - name: 'Add namespace to Custom Property Editors'
        run: |
             find . -type f -name "*.js-meta.xml" -print0 | xargs -0 sed -i 's,configurationEditor="c-,configurationEditor="autocomp-,'
         
     # Create package version and extract its id
      - name: 'Create package version'
        id: createPackageVersion
        run: |
                  set +e
                  packageName="${{ secrets.MANAGED_PACKAGE1 }}"
                  json=$(sfdx force:package:version:create -c -p "$packageName" -x -w 20 -f config/project-scratch-def.json --json)
                  echo $json
                  status=$(echo $json | jq '.status')
                  if [ $status == "0" ]; then
                      packageVersionId=$(echo $json | jq -r '.result.SubscriberPackageVersionId')
                      echo "packageVersionId=$packageVersionId" >> $GITHUB_OUTPUT
                  else
                      echo "sfdx force:package:version:create failed"
                  fi
                  exit $status 
                  
      # Wait for package replication
      - name: 'Wait for package replication'
        uses: maddox/actions/sleep@master
        with:
            args: 360
            
      # Install Plugin to install sfdx scanner
      - name: 'SFDX scanner Install'
        run: sfdx plugins:install @salesforce/sfdx-scanner
        
      # Generate Violation Report
      - name: 'Scan for Violations and Generate report'
        run: sfdx scanner:run:dfa --target "./**/*.cls" --projectdir "./"

      # Promote package version
      - name: 'Promote package version'
        run: sfdx force:package:version:promote --package ${{ steps.createPackageVersion.outputs.packageVersionId }} -n
            
      # Create scratch org
      - name: 'Create scratch org'
        run: |
             echo 'y' | sfdx sf org create scratch --target-dev-hub ${{ secrets.HUB_ORG_USERNAME }} --definition-file config/project-scratch-def.json --set-default --no-namespace --duration-days 30 --name ${{github.event.inputs.scratch-org_name}}
        
      # Generate scratch org User and password
      - name: 'Create user'
        run: sfdx force:user:create --definitionfile=config/user-def.json --setalias=new-user
                  
                  
      - name: Change password
        run: sfdx force:user:password:generate --targetusername=new-user
                  
                  
      - name: Display user information
        id: display_user
        run: sfdx force:user:display --targetusername=new-user --json
       
      # Install new package in scratch org
      - name: 'Install new package version in scratch org'
        run: sfdx force:package:install --package ${{ steps.createPackageVersion.outputs.packageVersionId }} -w 10 -u ${{github.event.inputs.scratch-org_name}} -r
        
      # Update package install link in readme
      - name: 'Update package install link in readme'
        run: |
                  packageName="${{ secrets.MANAGED_PACKAGE1 }}"
                  packageVersionId="${{ steps.createPackageVersion.outputs.packageVersionId }}"
                  packageLinkRegex="<a name=\"$packageName\" href=\"https:\/\/login\.salesforce\.com\/packaging\/installPackage\.apexp\?p0=[a-zA-ZA-ZA-Z0-9]{18}\">"
                  newPackageLink="<a name=\"${packageName}\" href=\"https://login.salesforce.com/packaging/installPackage.apexp?p0=${packageVersionId}\">"
                  sed -E -i "s,${packageLinkRegex},${newPackageLink}," README.md
                  
      # Revert namespace change in project config
      - name: 'Revert namespace change in project config'
        run: |
                  sed -i 's,"namespace": "autocomp","namespace": "",' sfdx-project.json
                  
      # Revert namespace changes in CPEs
      - name: 'Revert namespace changes in Custom Property Editors'
        run: git checkout **/*.js-meta.xml
        
      # Create PR for new package version
      - name: 'Create PR for new package version'
        id: create-pr
        uses: peter-evans/create-pull-request@v3
        with:
             title: 'Package: ${{ secrets.MANAGED_PACKAGE1 }} - New version: ${{ steps.createPackageVersion.outputs.packageVersionId }}'
             body: 'Released new package version ${{ steps.createPackageVersion.outputs.packageVersionId }} for package ${{ secrets.MANAGED_PACKAGE1 }}'
             author: github-actions[bot] <41898282+github-actions[bot]@users.noreply.github.com>
             commit-message: 'Package: ${{ secrets.MANAGED_PACKAGE1 }} - New version: ${{ steps.createPackageVersion.outputs.packageVersionId }}'
             branch: 'auto/package-version-${{ steps.createPackageVersion.outputs.packageVersionId }}'
             token: ${{ secrets.BOT_ACCESS_TOKEN }}
